diff --exclude=Linux-ifort.mk --exclude=.svn --exclude=.svnignore --exclude=CVS -Naur roms-3.5f/Master/ocean_coupler.F roms-3.5/Master/ocean_coupler.F
--- roms-3.5f/Master/ocean_coupler.F	2012-04-02 16:43:26.362489000 +0200
+++ roms-3.5/Master/ocean_coupler.F	2012-07-28 14:25:34.315448000 +0200
@@ -119,4 +119,659 @@
 # endif
 
 #endif
+#if defined REGCM_COUPLING
+      USE mod_kinds
+      IMPLICIT NONE
+!
+      PRIVATE
+      PUBLIC :: atm2ocn_coupling
+      PUBLIC :: allocate_atm2ocn
+      PUBLIC :: initialize_atm2ocn 
+!
+!  Declarations.
+!
+      TYPE RCM_DATA
+      real(r8), pointer :: Pair(:,:)
+      real(r8), pointer :: Tair(:,:)
+      real(r8), pointer :: Qair(:,:)
+      real(r8), pointer :: Swrad(:,:)
+      real(r8), pointer :: Lwrad(:,:)
+      real(r8), pointer :: Lwrad_down(:,:)
+      real(r8), pointer :: Lhflx(:,:)
+      real(r8), pointer :: Shflx(:,:)
+      real(r8), pointer :: Nhflx(:,:)
+      real(r8), pointer :: EminP(:,:)
+      real(r8), pointer :: Rain(:,:)
+      real(r8), pointer :: Uwind(:,:)
+      real(r8), pointer :: Vwind(:,:)
+      real(r8), pointer :: Ustr(:,:)
+      real(r8), pointer :: Vstr(:,:)
+      END TYPE RCM_DATA
+!
+      TYPE (RCM_DATA), PUBLIC, ALLOCATABLE :: rdata(:)
+!
+      INTEGER, PUBLIC, ALLOCATABLE :: CoupleSteps(:) 
+            
+      CONTAINS
+
+      SUBROUTINE atm2ocn_coupling (ng, tile)
+!
+!=======================================================================
+!                                                                      !
+!  This subroutine acquires the coupling data streams between ocean    !
+!  and atmosphere models. Currently, the following data streams are    !
+!  coded:                                                              !
+!                                                                      !
+!     (...) RegCM units                                                !
+!     [...] ROMS  units                                                !
+!                                                                      !
+!  Fields imported form RegCM model:                                   !
+!                                                                      !
+!     * Surface atmospheric pressure (Pa), [mb]                        !
+!     * Surface air relative humidity (percent), [fraction]            !
+!     * Surface (2 m) air temperature (Celsius), [Celsius]             !
+!     * Surface (10 m) U-wind speed (m/s), [m/s]                       !
+!     * Surface (10 m) V-wind speed (m/s), [m/s]                       !
+!     * Precipitation (m/s), [kg/m2/s]                                 !
+!     * Shortwave radiation (Watts/m2), [Celsius m/s]                  !
+!     * Downwelling long wave raditaion (Watts/m2), [Celsius m/s]      !
+!                                                                      !
+!  Fields exported to RegCM model:                                     !
+!                                                                      !
+!     * Sea surface potential temperature (Kelvin), [Celsius]          !
+!                                                                      !
+!=======================================================================
+!
+      USE mod_param
+!
+      implicit none
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile
+!
+#include "tile.h"
+!
+#ifdef PROFILE
+      CALL wclock_on (ng, iNLM, 48)
+#endif
+      CALL atm2ocn_coupling_tile (ng, tile,                             &
+     &                            LBi, UBi, LBj, UBj)
+#ifdef PROFILE
+      CALL wclock_off (ng, iNLM, 48)
+#endif
+!
+      RETURN
+      END SUBROUTINE atm2ocn_coupling
+!
+!***********************************************************************
+      SUBROUTINE atm2ocn_coupling_tile (ng, tile,                       &
+                                        LBi, UBi, LBj, UBj)
+!***********************************************************************
+!
+      USE mod_param
+      USE mod_parallel
+      USE mod_coupler
+      USE mod_forces
+      USE mod_ocean
+      USE mod_ncparam
+      USE mod_scalars
+      USE mod_stepping
+      USE mod_iounits
+      USE mod_grid 
+!
+      USE distribute_mod, ONLY : mp_reduce
+!
+      implicit none
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile
+      integer, intent(in) :: LBi, UBi, LBj, UBj
+!
+!  Local variable declarations.
+!
+      integer :: i, j, gtype, id, status
+      real(r8) :: Hscale
+      real(r8) :: Hscale2
+!
+# include "set_bounds.h"
+!
+      Hscale = rho0*Cp
+      Hscale2 = 1.0_r8/(rho0*Cp)
+!
+!-----------------------------------------------------------------------
+!  Import fields from atmosphere model (RegCM) to ocean model (ROMS).
+!-----------------------------------------------------------------------
+!
+#if defined BULK_FLUXES || defined ECOSIM || defined ATM_PRESS
+!
+!-----------------------------------------------------------------------
+!  Surface air pressure (mb)
+!-----------------------------------------------------------------------
+!
+      id = idPair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Pair,                               &
+     &                    FORCES(ng)%Pair,                              &
+     &                    status)
+#endif
+#if defined BULK_FLUXES || defined ECOSIM || \
+   (defined SHORTWAVE && defined ANA_SRFLUX)
+!
+!-----------------------------------------------------------------------
+!  Surface air humidity (g/kg) 
+!-----------------------------------------------------------------------
+!
+      id = idQair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Qair,                               &
+     &                    FORCES(ng)%Hair,                              &
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Surface (2m) air temperature (Celsius) 
+!-----------------------------------------------------------------------
+!
+      id = idTair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Tair,                               &
+     &                    FORCES(ng)%Tair,                              &
+     &                    status)
+#endif
+#if defined BULK_FLUXES || defined ECOSIM
+!
+!-----------------------------------------------------------------------
+!  U-wind (10m) component (m/s)
+!-----------------------------------------------------------------------
+!
+      id = idUair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Uwind,                              &
+     &                    FORCES(ng)%Uwind,                             &
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  V-wind (10m) component (m/s)
+!-----------------------------------------------------------------------
+!
+      id = idVair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Vwind,                              &
+     &                    FORCES(ng)%Vwind,                             &
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Rotate wind components 
+!-----------------------------------------------------------------------
+!
+      FORCES(ng)%Uwind = FORCES(ng)%Uwind*cos(GRID(ng)%angler)+         &
+                         FORCES(ng)%Vwind*sin(GRID(ng)%angler)
+      FORCES(ng)%Vwind = FORCES(ng)%Vwind*cos(GRID(ng)%angler)-         &
+                         FORCES(ng)%Uwind*sin(GRID(ng)%angler)       
+#endif
+#ifdef BULK_FLUXES
+!
+!-----------------------------------------------------------------------
+!  Precipitation (kg/m2/s) 
+!-----------------------------------------------------------------------
+!
+      id = idrain
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Rain,                               &
+     &                    FORCES(ng)%rain,                              &
+     &                    status)
+#ifdef LONGWAVE_OUT
+!
+!-----------------------------------------------------------------------
+!  Downwelling longwave radiation (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idLdwn
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Lwrad_down,                         &
+     &                    FORCES(ng)%lrflx,                             &
+     &                    status)
+#else
+!
+!-----------------------------------------------------------------------
+!  Net longwave radiation (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idLrad 
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Lwrad,                              &
+     &                    FORCES(ng)%lrflx,                             &
+     &                    status)
+#endif
+!
+!-----------------------------------------------------------------------
+!  Latent heat flux (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idLhea
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Lhflx,                              &
+     &                    FORCES(ng)%lhflx,                             &
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Sensible heat flux (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idShea
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Shflx,                              &
+     &                    FORCES(ng)%shflx,                             &
+     &                    status)
+#endif
+#ifdef SHORTWAVE
+!
+!-----------------------------------------------------------------------
+!  Shortwave radiation (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idSrad
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Swrad,                              &
+     &                    FORCES(ng)%srflx,                             &
+     &                    status)
+#endif
+#ifndef BULK_FLUXES
+!
+!-----------------------------------------------------------------------
+!  Surface net heat flux.
+!-----------------------------------------------------------------------
+!
+      id = idTsur(itemp) 
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Nhflx,                              &
+     &                    FORCES(ng)%stflx(:,:,itemp),                  &
+     &                    status) 
+!
+!-----------------------------------------------------------------------
+!  Surface net freshwater flux: E-P.
+!-----------------------------------------------------------------------
+!
+      id = idsfwf 
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%EminP,                              &
+     &                    FORCES(ng)%stflx(:,:,isalt),                  &
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Surface U-wind stress (Pa)
+!-----------------------------------------------------------------------
+!
+      id = idUsms 
+      gtype = u2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Ustr,                               &
+     &                    FORCES(ng)%sustr,                             &
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Surface V-wind stress (Pa)
+!-----------------------------------------------------------------------
+!
+      id = idVsms
+      gtype = v2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Vstr,                               &
+     &                    FORCES(ng)%svstr,                             &
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Rotate stress components 
+!-----------------------------------------------------------------------
+!
+      FORCES(ng)%sustr = FORCES(ng)%sustr*cos(GRID(ng)%angler)+         &
+                         FORCES(ng)%svstr*sin(GRID(ng)%angler)
+      FORCES(ng)%svstr = FORCES(ng)%svstr*cos(GRID(ng)%angler)-         &
+                         FORCES(ng)%sustr*sin(GRID(ng)%angler)
+!#ifdef ICE_MODEL
+!
+!-----------------------------------------------------------------------
+!  Ice model 
+!-----------------------------------------------------------------------
+!-----------------------------------------------------------------------
+!  Stress components 
+!-----------------------------------------------------------------------
+!
+!      gtype = u2dvar
+!      CALL ROMS_import2d (ng, tile, gtype,                              &
+!     &                    IstrR, IendR, JstrR, JendR,                   &
+!     &                    LBi, UBi, LBj, UBj,                           &
+!     &                    rdata(ng)%Ustr,                               &
+!     &                    FORCES(ng)%sustr_aw,                          &
+!     &                    status)
+!
+!      gtype = v2dvar
+!      CALL ROMS_import2d (ng, tile, gtype,                              &
+!     &                    IstrR, IendR, JstrR, JendR,                   &
+!     &                    LBi, UBi, LBj, UBj,                           &
+!     &                    rdata(ng)%Vstr,                               &
+!     &                    FORCES(ng)%svstr_aw,                          &
+!     &                    status)
+!
+!      gtype = u2dvar
+!      CALL ROMS_import2d (ng, tile, gtype,                              &
+!     &                    IstrR, IendR, JstrR, JendR,                   &
+!     &                    LBi, UBi, LBj, UBj,                           &
+!     &                    rdata(ng)%sustr,                              &
+!     &                    FORCES(ng)%tau_aix_n,                         &
+!     &                    status)
+!
+!      gtype = v2dvar
+!      CALL ROMS_import2d (ng, tile, gtype,                              &
+!     &                    IstrR, IendR, JstrR, JendR,                   &
+!     &                    LBi, UBi, LBj, UBj,                           &
+!     &                    rdata(ng)%sustr,                              &
+!     &                    FORCES(ng)%tau_aiy_n,                         &
+!     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Surface net heat flux (W/m2)
+!-----------------------------------------------------------------------
+!
+!      gtype = r2dvar
+!      CALL ROMS_import2d (ng, tile, gtype,                              &
+!     &                    IstrR, IendR, JstrR, JendR,                   &
+!     &                    LBi, UBi, LBj, UBj,                           &
+!     &                    rdata(ng)%Nhflx,                              &
+!     &                    FORCES(ng)%qao_n,                             &
+!     &                    status)
+!      FORCES(ng)%qao_n = -FORCES(ng)%qao_n*Hscale
+!
+!      gtype = r2dvar
+!      CALL ROMS_import2d (ng, tile, gtype,                              &
+!     &                    IstrR, IendR, JstrR, JendR,                   &
+!     &                    LBi, UBi, LBj, UBj,                           &
+!     &                    rdata(ng)%stflx(:,:,itemp),                   &
+!     &                    FORCES(ng)%qai_n,                             &
+!     &                    status)
+!      FORCES(ng)%qai_n = -FORCES(ng)%qai_n*Hscale
+!#endif 
+#endif
+!
+      RETURN
+      END SUBROUTINE atm2ocn_coupling_tile
+
+      SUBROUTINE allocate_atm2ocn (ng, LBi, UBi, LBj, UBj)
+      USE mod_param
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, LBi, UBi, LBj, UBj
+!
+      IF (ng .eq. 1) allocate(rdata(Ngrids))
+      allocate(rdata(ng)%Pair(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Tair(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Qair(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Swrad(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Lwrad(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Lwrad_down(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Lhflx(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Shflx(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Nhflx(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%EminP(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Rain(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Uwind(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Vwind(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Ustr(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Vstr(LBi:UBi,LBj:UBj))
+!
+      IF (ng .eq. 1) allocate(CoupleSteps(Ngrids))
+
+      RETURN
+      END SUBROUTINE allocate_atm2ocn
+!
+      SUBROUTINE initialize_atm2ocn (ng, tile)
+      USE mod_param
+      USE mod_scalars
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile
+!
+!  Local variable declarations.
+!
+      integer :: Imin, Imax, Jmin, Jmax
+      integer :: i, j, k
+!
+      real(r8), parameter :: IniVal = 1.0e20_r8 !0.0_r8
+!
+!  Set array initialization range.
+!
+#ifdef _OPENMP
+      IF (WESTERN_EDGE) THEN
+        Imin=BOUNDS(ng)%LBi(tile)
+      ELSE
+        Imin=Istr
+      END IF
+      IF (EASTERN_EDGE) THEN
+        Imax=BOUNDS(ng)%UBi(tile)
+      ELSE
+        Imax=Iend
+      END IF
+      IF (SOUTHERN_EDGE) THEN
+        Jmin=BOUNDS(ng)%LBj(tile)
+      ELSE
+        Jmin=Jstr
+      END IF
+      IF (NORTHERN_EDGE) THEN
+        Jmax=BOUNDS(ng)%UBj(tile)
+      ELSE
+        Jmax=Jend
+      END IF
+#else
+      Imin=BOUNDS(ng)%LBi(tile)
+      Imax=BOUNDS(ng)%UBi(tile)
+      Jmin=BOUNDS(ng)%LBj(tile)
+      Jmax=BOUNDS(ng)%UBj(tile)
+#endif
+!
+      DO j=Jmin,Jmax
+        DO i=Imin,Imax
+          rdata(ng)%Pair(i,j) = IniVal
+          rdata(ng)%Tair(i,j) = IniVal
+          rdata(ng)%Qair(i,j) = IniVal
+          rdata(ng)%Swrad(i,j) = IniVal
+          rdata(ng)%Lwrad(i,j) = IniVal
+          rdata(ng)%Lwrad_down(i,j) = IniVal
+          rdata(ng)%Lhflx(i,j) = IniVal
+          rdata(ng)%Shflx(i,j) = IniVal
+          rdata(ng)%Nhflx(i,j) = IniVal
+          rdata(ng)%EminP(i,j) = IniVal
+          rdata(ng)%Rain(i,j) = IniVal
+          rdata(ng)%Uwind(i,j) = IniVal
+          rdata(ng)%Vwind(i,j) = IniVal
+          rdata(ng)%Ustr(i,j) = IniVal
+          rdata(ng)%Vstr(i,j) = IniVal
+        END DO
+      END DO  
+!
+      RETURN
+      END SUBROUTINE initialize_atm2ocn
+
+      SUBROUTINE ROMS_import2d (ng, tile, gtype,                        &
+     &                          Imin, Imax, Jmin, Jmax,                 &
+     &                          LBi, UBi, LBj, UBj,                     & 
+     &                          InpField,                               &
+     &                          OutField,                               &
+     &                          status)
+      USE mod_param
+      USE mod_ncparam
+# if defined EW_PERIODIC || defined NS_PERIODIC
+      USE exchange_2d_mod
+# endif
+# ifdef DISTRIBUTE
+      USE distribute_mod,  ONLY : mp_reduce
+      USE mp_exchange_mod, ONLY : mp_exchange2d
+# endif
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile, gtype
+      integer, intent(in) :: Imin, Imax, Jmin, Jmax
+      integer, intent(in) :: LBi, UBi, LBj, UBj
+      real(r8), intent(in) ::  InpField(:,:)
+      real(r8), intent(out) :: OutField(LBi:UBi,LBj:UBj)
+      integer, intent(out) :: status
+!
+!  Local variable declarations.
+!
+# ifdef DISTRIBUTE
+#  ifdef EW_PERIODIC
+      logical :: EWperiodic=.TRUE.
+#  else
+      logical :: EWperiodic=.FALSE.
+#  endif
+#  ifdef NS_PERIODIC
+      logical :: NSperiodic=.TRUE.
+#  else
+      logical :: NSperiodic=.FALSE.
+#  endif
+# endif
+      integer :: i, j
+      real(r8) :: OutFmin, OutFmax
+      real(r8), parameter :: Large = 1.0E+20_r8
+      real(r8), dimension(2) :: range
+# ifdef DISTRIBUTE
+      character (len=3), dimension(2) :: op_handle
+# endif
+!
+!-----------------------------------------------------------------------
+!  Import 2D field (update also halo regions).
+!-----------------------------------------------------------------------
+!
+      status=0
+      range(1)= Large
+      range(2)=-Large
+      OutField = InpField
+      range(1)=MINVAL(OutField)
+      range(2)=MAXVAL(OutField)
+!
+# ifdef DISTRIBUTE
+!
+!  Global reduction for imported field range values.
+!
+      op_handle(1)='MIN'
+      op_handle(2)='MAX'
+      CALL mp_reduce (ng, iNLM, 2, range, op_handle)
+      OutFmin=range(1)
+      OutFmax=range(2)
+# endif
+!
+!-----------------------------------------------------------------------
+!  Exchange boundary information.
+!-----------------------------------------------------------------------
+!
+# if defined EW_PERIODIC || defined NS_PERIODIC
+      IF (gtype.eq.r2dvar) THEN
+        CALL exchange_r2d_tile (ng, tile,                               &
+     &                          LBi, UBi, LBj, UBj,                     &
+     &                          OutField)
+      ELSE IF (gtype.eq.u2dvar) THEN
+        CALL exchange_u2d_tile (ng, tile,                               &
+     &                          LBi, UBi, LBj, UBj,                     &
+     &                          OutField)
+      ELSE IF (gtype.eq.v2dvar) THEN
+        CALL exchange_v2d_tile (ng, tile,                               &
+     &                          LBi, UBi, LBj, UBj,                     &
+     &                          OutField)
+      END IF
+# endif
+# ifdef DISTRIBUTE
+      CALL mp_exchange2d (ng, tile, iNLM, 1,                            &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    NghostPoints, EWperiodic, NSperiodic,         &
+     &                    OutField)
+# endif
+      RETURN
+      END SUBROUTINE ROMS_import2d
+!
+      SUBROUTINE PRINT_MATRIX_R8(inp, iskip, jskip, pet, header)
+      implicit none
+!
+!-----------------------------------------------------------------------
+!     Imported variable declarations 
+!-----------------------------------------------------------------------
+!
+      real(r8), intent(in) :: inp(:,:)
+      integer, intent(in) ::  iskip, jskip, pet
+      character(len=*), intent(in) :: header
+!
+!-----------------------------------------------------------------------
+!     Local variable declarations 
+!-----------------------------------------------------------------------
+!
+      integer :: i, j, imin, imax, jmin, jmax
+      character(100) :: fmt_123
+!
+!-----------------------------------------------------------------------
+!     Write data 
+!-----------------------------------------------------------------------
+!
+      imin = lbound(inp, dim=1)
+      imax = ubound(inp, dim=1)
+      jmin = lbound(inp, dim=2)
+      jmax = ubound(inp, dim=2)
+!
+      WRITE(6, fmt="('PET(',I2,') - ',A)") pet, trim(header)
+!
+      WRITE(fmt_123, fmt="('(/, 5X, ', I3, 'I10)')") (imax-imin)+1
+      WRITE(6, fmt=trim(fmt_123))  (i, i=imin, imax, iskip)
+!   
+      WRITE(fmt_123, fmt="('(I5, ', I3, 'F10.2)')") imax
+      DO j = jmin, jmax, jskip
+        write(6, fmt=trim(fmt_123)) j, (inp(i,j),i=imin, imax, iskip)
+      END DO
+!
+      RETURN
+      END SUBROUTINE PRINT_MATRIX_R8
+#endif
       END MODULE ocean_coupler_mod
diff --exclude=Linux-ifort.mk --exclude=.svn --exclude=.svnignore --exclude=CVS -Naur roms-3.5f/ROMS/Nonlinear/bulk_flux.F roms-3.5/ROMS/Nonlinear/bulk_flux.F
--- roms-3.5f/ROMS/Nonlinear/bulk_flux.F	2012-04-02 16:40:56.450595000 +0200
+++ roms-3.5/ROMS/Nonlinear/bulk_flux.F	2012-08-02 14:58:21.223956000 +0200
@@ -401,10 +401,19 @@
 !  is assumed constant, but it is a function of latitude varying from
 !  1.0 at poles to 0.5 at the equator).
 !
+#  ifdef SPECIFIC_HUMIDITY
+!  specific humidity in units of kg/kg
+          vap_p=PairM*RH/(1.0_r8+0.378_r8*RH)            
+#  else
+      IF(RH.lt.2.0_r8) THEN                             
           cff=(0.7859_r8+0.03477_r8*TairC(i))/                          &
      &        (1.0_r8+0.00412_r8*TairC(i))
           e_sat=10.0_r8**cff   ! saturation vapor pressure (hPa or mbar)
           vap_p=e_sat*RH       ! water vapor pressure (hPa or mbar)
+      ELSE                                               
+          vap_p=0.001_r8*PairM*RH/(1.0_r8+0.000378_r8*RH) 
+      ENDIF                                               
+#  endif
           cff2=TairK(i)*TairK(i)*TairK(i)
           cff1=cff2*TairK(i)
           LRad(i,j)=-emmiss*StefBo*                                     &
@@ -468,12 +477,17 @@
 !
 !  Compute specific humidity, Q (kg/kg).
 !
+#if defined CORE_FORCING || defined SPECIFIC_HUMIDITY
+! Incoming humidity is specific humidity in (kg/kg)
+          Q(i)=RH
+#else
           IF (RH.lt.2.0_r8) THEN                       !RH fraction
             cff=cff*RH                                 !Vapor pres (mb)
             Q(i)=0.62197_r8*(cff/(PairM-0.378_r8*cff)) !Spec hum (kg/kg)
           ELSE          !RH input was actually specific humidity in g/kg
             Q(i)=RH/1000.0_r8                          !Spec Hum (kg/kg)
           END IF
+#endif
 !
 !  Compute water saturation vapor pressure (mb), using Teten formula.
 !
diff --exclude=Linux-ifort.mk --exclude=.svn --exclude=.svnignore --exclude=CVS -Naur roms-3.5f/ROMS/Nonlinear/main3d.F roms-3.5/ROMS/Nonlinear/main3d.F
--- roms-3.5f/ROMS/Nonlinear/main3d.F	2012-04-02 16:40:57.039631000 +0200
+++ roms-3.5/ROMS/Nonlinear/main3d.F	2012-07-28 14:25:34.319456000 +0200
@@ -75,6 +75,9 @@
 # ifdef AIR_OCEAN
       USE ocean_coupler_mod, ONLY : ocn2atm_coupling
 # endif
+# ifdef REGCM_COUPLING
+      USE ocean_coupler_mod, ONLY : atm2ocn_coupling
+# endif
 # ifdef WAVES_OCEAN
       USE ocean_coupler_mod, ONLY : ocn2wav_coupling
 # endif
@@ -279,6 +282,25 @@
         END DO
 # endif
 
+# ifdef REGCM_COUPLING
+!
+!-----------------------------------------------------------------------
+!  Couple atmosphere to ocean model 
+!-----------------------------------------------------------------------
+!
+        DO ng=1,Ngrids
+!$OMP PARALLEL DO PRIVATE(thread,subs,tile) SHARED(ng,numthreads)
+          DO thread=0,numthreads-1
+            subs=NtileX(ng)*NtileE(ng)/numthreads
+            !DO tile=subs*thread,subs*(thread+1)-1,+1
+            DO tile=subs*(thread+1)-1,subs*thread,-1
+              CALL atm2ocn_coupling (ng, TILE)
+            END DO
+          END DO
+!$OMP END PARALLEL DO
+        END DO
+# endif
+
 # ifdef WAVES_OCEAN
 !
 !-----------------------------------------------------------------------
diff --exclude=Linux-ifort.mk --exclude=.svn --exclude=.svnignore --exclude=CVS -Naur roms-3.5f/ROMS/Utility/def_his.F roms-3.5/ROMS/Utility/def_his.F
--- roms-3.5f/ROMS/Utility/def_his.F	2012-04-02 16:41:29.237546000 +0200
+++ roms-3.5/ROMS/Utility/def_his.F	2012-07-28 14:25:34.339457000 +0200
@@ -1190,6 +1190,28 @@
           IF (exit_flag.ne.NoError) RETURN
         END IF
 # endif
+# ifdef REGCM_COUPLING
+# if defined BULK_FLUXES || defined ECOSIM || (defined SHORTWAVE && defined ANA_SRFLUX)
+!
+!  Define surface air humidity.
+!
+        IF (Hout(idQair,ng)) THEN
+          Vinfo( 1)=Vname(1,idQair)
+          Vinfo( 2)=Vname(2,idQair)
+          Vinfo( 3)=Vname(3,idQair)
+          Vinfo(14)=Vname(4,idQair)
+          Vinfo(16)=Vname(1,idtime)
+#  if defined WRITE_WATER && defined MASKING
+          Vinfo(20)='mask_rho'
+#  endif  
+          Vinfo(22)='coordinates'
+          Aval(5)=REAL(Iinfo(1,idQair,ng),r8)
+          status=def_var(ng, iNLM, HIS(ng)%ncid, HIS(ng)%Vid(idQair),   &
+     &                   NF_FOUT, nvd3, t2dgrd, Aval, Vinfo, ncname)
+          IF (exit_flag.ne.NoError) RETURN
+        END IF
+# endif
+# endif
 # if defined BULK_FLUXES || defined ECOSIM
 !
 !  Define surface winds.
@@ -2441,6 +2463,13 @@
             got_var(idPair)=.TRUE.
             HIS(ng)%Vid(idPair)=var_id(i)
 # endif
+# ifdef REGCM_COUPLING
+# if defined BULK_FLUXES || defined ECOSIM || (defined SHORTWAVE && defined ANA_SRFLUX)
+          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idQair))) THEN
+            got_var(idQair)=.TRUE.
+            HIS(ng)%Vid(idQair)=var_id(i)
+# endif
+# endif
 # if defined BULK_FLUXES || defined ECOSIM
           ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idUair))) THEN
             got_var(idUair)=.TRUE.
@@ -2858,6 +2887,16 @@
           RETURN
         END IF
 # endif
+# ifdef REGCM_COUPLING
+# if defined BULK_FLUXES || defined ECOSIM || (defined SHORTWAVE && defined ANA_SRFLUX)
+        IF (.not.got_var(idQair).and.Hout(idQair,ng)) THEN
+          IF (Master) WRITE (stdout,60) TRIM(Vname(1,idQair)),          &
+     &                                  TRIM(ncname)
+          exit_flag=3
+          RETURN
+        END IF
+# endif
+# endif
 # if defined BULK_FLUXES || defined ECOSIM
         IF (.not.got_var(idUair).and.Hout(idUair,ng)) THEN
           IF (Master) WRITE (stdout,60) TRIM(Vname(1,idUair)),          &
diff --exclude=Linux-ifort.mk --exclude=.svn --exclude=.svnignore --exclude=CVS -Naur roms-3.5f/ROMS/Utility/get_date.F roms-3.5/ROMS/Utility/get_date.F
--- roms-3.5f/ROMS/Utility/get_date.F	2012-04-02 16:41:28.631521000 +0200
+++ roms-3.5/ROMS/Utility/get_date.F	2012-07-28 14:25:34.342458000 +0200
@@ -284,6 +284,10 @@
      &         (/ 1,32,61,92,122,153,183,214,245,275,306,336,367 /)
 
       real(r8) :: rday
+# ifdef REGCM_COUPLING
+      integer :: i
+      real(r8) :: sday, nday
+# endif
 !
 !-----------------------------------------------------------------------
 !  Get calendar day from model time.
@@ -292,6 +296,50 @@
 !  The reference time is a positive date specified at initialization.
 !
       IF (INT(r_date(1)).gt.0) THEN
+# ifdef REGCM_COUPLING
+        rday=time+r_date(3)+                                            &
+     &       (r_date(6)+(r_date(7)+r_date(8)/60.0_r8)/60.0_r8)/24.0_r8
+        year=INT(r_date(2))+INT(rday/365.25_r8)
+        sday = 0.0_r8
+        DO i = INT(r_date(2)), year-1
+          leap=MOD(i,4)
+          if (leap.eq.0) THEN
+            nday = 366.0_r8
+          else
+            nday = 365.0_r8
+          end if
+          sday = sday+nday
+        END DO
+        IF (rday .lt. sday) year = year-1
+        IF (year .eq. INT(r_date(2))) THEN
+          yday = rday
+        ELSE
+          IF ((sday-rday) .lt. 0.0_r8) THEN
+            yday=MAX(1.0_r8,MOD(rday,365.25_r8))
+          ELSE
+            yday = rday-(sday-nday)+1
+          END IF
+        END IF
+        leap=MOD(year,4)
+        IF (leap.eq.0) THEN
+          month=0
+          DO i = 1, 12
+            IF ((yday .GE. iydl(i)) .AND. (yday .LT. iydl(i+1))) THEN
+              month = i
+            END IF
+          END DO
+          day=INT(yday)-iydl(month)+1
+        ELSE
+          month=0
+          DO i = 1, 12
+            IF ((yday .GE. iyd(i)) .AND. (yday .LT. iyd(i+1))) THEN
+              month = i
+            END IF
+          END DO
+          day=INT(yday)-iyd(month)+1
+        END IF
+        hour=(rday-AINT(rday))*24.0_r8
+# else
         rday=time+r_date(3)+                                            &
      &       (r_date(6)+(r_date(7)+r_date(8)/60.0_r8)/60.0_r8)/24.0_r8
         year=INT(r_date(2))+INT(rday/365.25_r8)
@@ -306,6 +354,7 @@
           day=INT(yday)-iydl(month)+1
         END IF
         hour=(rday-AINT(rday))*24.0_r8
+# endif
 !
 !  The reference time is for a climatological simulation with 365.25
 !  days in every year.
diff --exclude=Linux-ifort.mk --exclude=.svn --exclude=.svnignore --exclude=CVS -Naur roms-3.5f/ROMS/Utility/inp_par.F roms-3.5/ROMS/Utility/inp_par.F
--- roms-3.5f/ROMS/Utility/inp_par.F	2012-04-02 16:41:26.773399000 +0200
+++ roms-3.5/ROMS/Utility/inp_par.F	2012-07-28 14:25:34.354452000 +0200
@@ -105,7 +105,11 @@
 !  input parameters to all nodes.
 !
 !!    CALL my_getarg (1, Iname)
+#  ifdef REGCM_COUPLING 
+      IF (Master) CALL my_getarg (2, Iname)
+#  else
       IF (Master) CALL my_getarg (1, Iname)
+#  endif
       CALL mp_bcasts (1, model, Iname)
       OPEN (inp, FILE=TRIM(Iname), FORM='formatted', STATUS='old',      &
      &      ERR=20)
@@ -2219,6 +2223,24 @@
             END IF
             Npts=load_l(Nval, Cval, Ngrids, Hout(idPair,:))
 # endif
+# ifdef REGCM_COUPLING
+# if defined BULK_FLUXES || defined ECOSIM || (defined SHORTWAVE && defined ANA_SRFLUX)
+          ELSE IF (TRIM(KeyWord).eq.'Hout(idTair)') THEN
+            IF (idTair.eq.0) THEN
+              IF (Master) WRITE (out,280) 'idTair'
+              exit_flag=5
+              RETURN
+            END IF
+            Npts=load_l(Nval, Cval, Ngrids, Hout(idTair,:))
+          ELSE IF (TRIM(KeyWord).eq.'Hout(idQair)') THEN
+            IF (idQair.eq.0) THEN
+              IF (Master) WRITE (out,280) 'idQair'
+              exit_flag=5
+              RETURN
+            END IF
+            Npts=load_l(Nval, Cval, Ngrids, Hout(idQair,:))
+# endif
+# endif
 # if defined BULK_FLUXES || defined ECOSIM
           ELSE IF (TRIM(KeyWord).eq.'Hout(idUair)') THEN
             IF (idUair.eq.0) THEN
@@ -2228,7 +2250,7 @@
             END IF
             Npts=load_l(Nval, Cval, Ngrids, Hout(idUair,:))
           ELSE IF (TRIM(KeyWord).eq.'Hout(idVair)') THEN
-            IF (idPair.eq.0) THEN
+            IF (idVair.eq.0) THEN
               IF (Master) WRITE (out,280) 'idVair'
               exit_flag=5
               RETURN
@@ -4407,6 +4429,16 @@
      &       'Hout(idPair)',                                            &
      &       'Write out surface air pressure.'
 # endif
+# ifdef REGCM_COUPLING
+#if defined BULK_FLUXES || defined ECOSIM || (defined SHORTWAVE && defined ANA_SRFLUX)
+          IF (Hout(idTair,ng)) WRITE (out,170) Hout(idTair,ng),         &
+     &       'Hout(idTair)',                                            &
+     &       'Write out surface air temperature.'
+          IF (Hout(idQair,ng)) WRITE (out,170) Hout(idQair,ng),         &
+     &       'Hout(idQair)',                                            &
+     &       'Write out surface air humidity.'
+# endif
+# endif
 # if defined BULK_FLUXES || defined ECOSIM
           IF (Hout(idUair,ng)) WRITE (out,170) Hout(idUair,ng),         &
      &       'Hout(idUair)',                                            &
diff --exclude=Linux-ifort.mk --exclude=.svn --exclude=.svnignore --exclude=CVS -Naur roms-3.5f/ROMS/Utility/wrt_his.F roms-3.5/ROMS/Utility/wrt_his.F
--- roms-3.5f/ROMS/Utility/wrt_his.F	2012-04-02 16:41:29.652568000 +0200
+++ roms-3.5/ROMS/Utility/wrt_his.F	2012-07-28 14:25:34.358460000 +0200
@@ -1032,6 +1032,54 @@
         END IF
       END IF
 # endif
+# ifdef REGCM_COUPLING
+# if defined BULK_FLUXES || defined ECOSIM || (defined SHORTWAVE && defined ANA_SRFLUX)
+!
+!  Write out surface air temperature.
+!
+      IF (Hout(idTair,ng)) THEN
+        scale=1.0_r8
+        gtype=gfactor*r2dvar
+        status=nf_fwrite2d(ng, iNLM, HIS(ng)%ncid, HIS(ng)%Vid(idTair), &
+     &                     HIS(ng)%Rindex, gtype,                       &
+     &                     LBi, UBi, LBj, UBj, scale,                   &
+#  ifdef MASKING
+     &                     GRID(ng) % rmask_io,                         &
+#  endif
+     &                     FORCES(ng) % Tair)
+        IF (status.ne.nf90_noerr) THEN
+          IF (Master) THEN
+            WRITE (stdout,10) TRIM(Vname(1,idTair)), HIS(ng)%Rindex 
+          END IF
+          exit_flag=3
+          ioerror=status
+          RETURN
+        END IF
+      END IF
+!
+!  Write out surface air humidity.
+!
+      IF (Hout(idQair,ng)) THEN
+        scale=1.0_r8
+        gtype=gfactor*r2dvar
+        status=nf_fwrite2d(ng, iNLM, HIS(ng)%ncid, HIS(ng)%Vid(idQair), &
+     &                     HIS(ng)%Rindex, gtype,                       &
+     &                     LBi, UBi, LBj, UBj, scale,                   &
+#  ifdef MASKING
+     &                     GRID(ng) % rmask_io,                         &
+#  endif
+     &                     FORCES(ng) % Hair)
+        IF (status.ne.nf90_noerr) THEN
+          IF (Master) THEN
+            WRITE (stdout,10) TRIM(Vname(1,idQair)), HIS(ng)%Rindex
+          END IF
+          exit_flag=3
+          ioerror=status
+          RETURN
+        END IF
+      END IF
+# endif
+# endif
 # if defined BULK_FLUXES || defined ECOSIM
 !
 !  Write out surface winds.
